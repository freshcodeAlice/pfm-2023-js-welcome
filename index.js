/* Методи масива */

const arr = [5, 4, 3, 2, 1] // === new Array();


// Метод at(index) - повертає значення з масива за вказаним індексом

arr[3] === arr.at(3)


/// Метод push(value) - приймає значення і кладе його наступним елементом масива. Повертає новий length
arr.push(8);

//  Метод pop() - видаляє останній елемент масиву та повертає його значення


// Метод shift() - видаляє перший елемент масиву та повертає його значення, всі елементи здвигаються наперед

// Метод unshift() - вставляє 1 або більше елементів на початок, всі елементи здвигаються назад, повертає новий length


const arr1 = [2, 3, 4];
const arr2 = [5, 6, 7];

// Метод .concat() об'єднує два масива


const concatedArrays = arr1.concat(arr2);


/// Метод includes(value) - повертає true, якщо value присутнє в масиві і false, якщо ні


const a = {
    key: 'value'
}

const newArr = [3, 4, 5, a, 7, 1, 2];



/// Метод  indexOf(value) повертає індекс елемента, якщо він такий в масиві є і -1, якщо такого елемента в масиві нема

function getIndexOf(value, array) {
    let index = -1;
    for (let i=0; i < array.length; i++) {
        if (array[i] === value) {
            return i;
        }
    }
    return index;
}


/// Метод .reverse()  перевертає масив задом-наперед. Мутує початковий об'єкт

const arr5 = [9, 8, 7, 6, 5, 4, 3];

arr5.reverse() // перевернула масив


function myReverse(array) {
    // створюємо новий масив
    const newArr = [];
    // записуємо в нього всі елементи початкового, в зворотньому порядку
    for (let i = array.length - 1; i >= 0; i--) {
        newArr.push(array[i]);
    }
        // повертаємо новий масив
    return newArr


    /// щоб змінити початковий массив
    array = newArr;
}


///// Метод splice(початковий індекс, кількість елементів) - мутує початковий масив, починаючи з вказаного індексу видаляє вказану кількість елементів. Повертає внаслідок роботи міні-масив, що містить видалені елемент

arr.splice(3, 1, 44, 33); // починаючи з 3 індекса видалить 1 елемент і замість нього вставить два - число 44 і число 33


// Метод slice(start, end) - повертає новий масив, що містить копію частини попереднього
// елемент з індексом start попадає в результат, end - ні
// Якщо аргумент end опущено (метод викликали з одним аргументом) - це означає від start і до кінця масиву

arr.slice(2, 5) // з 2 до 5(не включно)

arr.slice(4) // від 4 до кінця




/*
slice робить поверхневе копіювання елементів.

Поверхневе копіювання - якщо елемент масиву - об'єкт, то поверхневе копіювання копіює посилання на об'єкт

Глибоке копіювання об'єктів - послідовний перебір кожного об'єкта та копіювання його в новий об'єкт

*/

const users = [
    {
        username: 'John',
        email: 'wer@sfe.sdf'
    },
    {
        username: 'Jane',
        email: 'dsasd@ud.fdsa'
    },
    {
        username: 'Jack',
        email: 'dwaw@sdf.ds'
    }
]


/*
Таски (на методи масива)

1. Дано два масива: [1, 2, 3] і [4, 5, 6]. Об'єднати їх разом. concat()

2. Даний масив [6, 5, 4]. Зробити з нього [4, 5,6]. reverse()

3. Даний масив [1, 2, 3]. Додати йому в кінець елементи 4, 5, 6. push()

4. Даний масив [7, 8, 9]. Додати йому на початок 1, 2, 3. unshift()

5. Даний масив ['aaa', 'bbb', 'ccc']. Виведіть в консоль перший елемент та видаліть його. shift()

6.  Даний масив ['aaa', 'bbb', 'ccc']. Виведіть в консоль та видаліть останній елемент. pop()

7. Даний масив [9, 10, 11, 12, 13]. Скопіювати в новий масив елементи з другого по п'ятий. slice()

8. З масиву [1, 2, 3, 4, 5] зробити масив [1, 4, 5] (оригінальний має змінитись). splice()

9. З масиву [1, 2, 3, 4, 5] скопіювати в новий масив [3, 4, 5]. slice()

10. З масиву  [1, 2, 3, 4, 5] (не одніє командою) зробити масив [1, 'w', 'trtr', 2, 3, 4, 'vvv', 'a', 'hello']
splice()


*/