'use strict';


function fnDeclare() {
    // Варіант 1:
    /* пройтись звичайним циклом і знайти суму всіх елементів arguments

    let sum = 0;
    for (let i = 0; i < arguments.length; i++) {
     sum += arguments[i];
    }
    return sum;

    */

    // Варіант 2: переробити arguments в звичайний Array і скористатися методом масива

    return Array.from(arguments).reduce((accum, value) => accum+value, 0);

}

/*
Задача: з функції, яка приймає 2 аргументи і повертає суму цих 2 аргументів переробити її на функцію, яка може приймати довільне число аргументів і повертати суму

1. Чи можемо ми приймати більше аргументів?
Всі аргументи, які передаються в функцію, записуються в arguments

Псевдо-масив - об'єкт, схожий на масив, всі елементи мають порядковий номер, об'єкт має length, але не є екземпляром об'єкту Array. Не має доступу до методів та властивостей Array

*/
/*
Практика: написати функцію, яка приймає довільну кількість слів і повертає фразу, що містить всі ці слова через пробіл

*/


function getSentence(){
    return Array.from(arguments).join(' ');
}





const arrFn = (...args) => args.reduce((accum, value) => accum + value, 0);
/*  у стрілочних функцій не працює arguments */



/*
оператор rest - залишкові параметри - ...


*/


function restArr(a, b, ...arrayOfArgs){
   
    console.log(arrayOfArgs);
}


/* оператор spread - розбиття масиву на штучні елементи - ...
*/


const numbs = [1, 2, 5, 3, 77, 34, 90];

//  Задача: є функція, яка очікує розрізнені поштучні елементи 

fnDeclare() // <- сюди очікується список розрізнених елементів
fnDeclare(...numbs);


/*
1. Переписати функцію попередньої таски на стрілочну, використовуючи rest

Задача була така: написати функцію, яка приймає довільну кількість слів і повертає фразу, що містить всі ці слова через пробіл

2. Дан масив  [1, 2, 5, 3, 77, 34, 90]
Знайти найбільше число в масиві, використовуючи метод Math.max();
*/

//1

//const getSentence = (...args) => args.join(' ');

//2

Math.max(...numbs)